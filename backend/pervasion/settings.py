"""
Django settings for pervasion project.
Generated by 'django-admin startproject' using Django 4.2.10.
This settings file reads configuration from environment (.env) and is
prepared for both development and production usage.
"""
import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured

# Load environment variables from .env (if present)
load_dotenv()

# Helpers
def env_bool(key, default=False):
    val = os.getenv(key, None)
    if val is None:
        return default
    return str(val).lower() in ("1", "true", "yes", "on")

def env_list(key, default=""):
    val = os.getenv(key, default)
    return [p.strip() for p in val.split(",") if p.strip()]

def get_env(key, default=None, required_in_prod=False):
    v = os.getenv(key, default)
    if required_in_prod and not v and not env_bool("DEBUG", False):
        raise ImproperlyConfigured(f"Missing required environment variable: {key}")
    return v

# BASE_DIR
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY
SECRET_KEY = get_env("SECRET_KEY", None, required_in_prod=True)

DEBUG = env_bool("DEBUG", False)

# ALLOWED_HOSTS
ALLOWED_HOSTS = env_list("ALLOWED_HOSTS", "localhost,127.0.0.1")

# Application definition
INSTALLED_APPS = [
    # Django builtins
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_filters",

    # Local apps
    "api",
    "projects",
    "users",
    "contact",
    "comments",
]

# Middleware ordering: Security -> WhiteNoise -> CORS -> Sessions -> Common -> ...
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # serve static files efficiently
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pervasion.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pervasion.wsgi.application"

# Database (use dj_database_url)
import dj_database_url

DATABASES = {
    "default": dj_database_url.config(
        default=get_env("DATABASE_URL", "postgres://pervasion:pervasion@localhost:5432/pervasion"),
        conn_max_age=int(get_env("DB_CONN_MAX_AGE", 600)),
        conn_health_checks=True,
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = get_env("TIME_ZONE", "UTC")
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_DIRS = [
    
]

# Use whitenoise storage in production for compressed + manifest hashed files
if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Default file storage (can be changed to S3 via env)
DEFAULT_FILE_STORAGE = get_env("DEFAULT_FILE_STORAGE", "django.core.files.storage.FileSystemStorage")

# File upload permissions
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Default primary key
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": int(get_env("PAGE_SIZE", 10)),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        *(["rest_framework.renderers.BrowsableAPIRenderer"] if DEBUG else []),
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ],
}

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(get_env("JWT_ACCESS_MINUTES", 30))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(get_env("JWT_REFRESH_DAYS", 1))),
    "ROTATE_REFRESH_TOKENS": env_bool("JWT_ROTATE_REFRESH_TOKENS", False),
    "BLACKLIST_AFTER_ROTATION": env_bool("JWT_BLACKLIST_AFTER_ROTATION", True),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": get_env("JWT_SIGNING_KEY", SECRET_KEY),
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# CORS configuration
# prefer reading origins from env; fallback to a sensible local-dev list
# CORS_ALLOWED_ORIGINS = env_list(
#     "CORS_ALLOWED_ORIGINS",
#     "http://localhost:8000,http://127.0.0.1:8000,http://localhost:5173,http://127.0.0.1:5173",
# )
# CORS_ALLOW_ALL_ORIGINS = env_bool("CORS_ALLOW_ALL_ORIGINS", False)
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True   
else:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [
        "https://jumoohmedia.com",
        "https://jumooh.media",
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
    
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = env_list(
    "CORS_ALLOW_HEADERS",
    "accept,accept-encoding,authorization,content-type,dnt,origin,user-agent,x-csrftoken,x-requested-with",
)
CORS_EXPOSE_HEADERS = env_list("CORS_EXPOSE_HEADERS", "content-disposition")
CORS_PREFLIGHT_MAX_AGE = int(get_env("CORS_PREFLIGHT_MAX_AGE", 86400))

# Custom user model
AUTH_USER_MODEL = "users.User"
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

# Email settings (read from env)
EMAIL_BACKEND = get_env("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = get_env("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(get_env("EMAIL_PORT", 587))
EMAIL_USE_TLS = env_bool("EMAIL_USE_TLS", True)
EMAIL_USE_SSL = env_bool("EMAIL_USE_SSL", False)
EMAIL_HOST_USER = get_env("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = get_env("EMAIL_HOST_PASSWORD", None)
DEFAULT_FROM_EMAIL = get_env("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)

# For local development: fallback to console backend if credentials not provided
if DEBUG and (not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD):
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    # avoid printing secrets; only informational
    print("INFO: Using console email backend (DEBUG=True). Real email credentials not configured.")

# Frontend URL (include scheme if possible)
FRONTEND_URL = get_env("FRONTEND_URL", "http://localhost:8000")
if not FRONTEND_URL.startswith("http"):
    # ensure scheme for consistency
    FRONTEND_URL = f"https://{FRONTEND_URL}" if not DEBUG else f"http://{FRONTEND_URL}"

# Security-related settings (HTTPS, HSTS). Tweak values via env when ready for prod.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
CSRF_COOKIE_SECURE = env_bool("CSRF_COOKIE_SECURE", not DEBUG)
SESSION_COOKIE_SECURE = env_bool("SESSION_COOKIE_SECURE", not DEBUG)
SECURE_SSL_REDIRECT = env_bool("SECURE_SSL_REDIRECT", not DEBUG)
SECURE_HSTS_SECONDS = int(get_env("SECURE_HSTS_SECONDS", 0))  # set e.g. 31536000 when fully ready
SECURE_HSTS_INCLUDE_SUBDOMAINS = env_bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", False)
SECURE_HSTS_PRELOAD = env_bool("SECURE_HSTS_PRELOAD", False)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"

# Logging: basic file logging for production; console in DEBUG
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": str(LOG_DIR / "django.log"),
        },
    },
    "root": {"handlers": ["console", "file"] if not DEBUG else ["console"], "level": "INFO"},
}

# Other recommended settings
SECURE_SSL_REDIRECT = SECURE_SSL_REDIRECT
# If your nginx terminates SSL, make sure nginx sets X-Forwarded-Proto header
# and SECURE_PROXY_SSL_HEADER is set above.

# -----------------------------------------------------------------------------
# Any extra/custom settings you want to add below
# -----------------------------------------------------------------------------

# Example: pagination default page size (can be overridden by PAGE_SIZE env)
PAGE_SIZE = int(get_env("PAGE_SIZE", 10))

# Example: additional third-party config placeholders
# SIMPLE_THIRD_PARTY_CONFIG = { ... }

# End of file
